// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for PayoutRecordsStatus.
const (
	PayoutRecordsStatusCompleted  PayoutRecordsStatus = "completed"
	PayoutRecordsStatusFailed     PayoutRecordsStatus = "failed"
	PayoutRecordsStatusPending    PayoutRecordsStatus = "pending"
	PayoutRecordsStatusProcessing PayoutRecordsStatus = "processing"
)

// Defines values for PayoutStatus.
const (
	PayoutStatusCompleted  PayoutStatus = "completed"
	PayoutStatusFailed     PayoutStatus = "failed"
	PayoutStatusPending    PayoutStatus = "pending"
	PayoutStatusProcessing PayoutStatus = "processing"
)

// Defines values for PayoutListRequestSortOrder.
const (
	PayoutListRequestSortOrderAsc  PayoutListRequestSortOrder = "asc"
	PayoutListRequestSortOrderDesc PayoutListRequestSortOrder = "desc"
)

// Defines values for UpdatePayoutRequestRecordsStatus.
const (
	UpdatePayoutRequestRecordsStatusCompleted  UpdatePayoutRequestRecordsStatus = "completed"
	UpdatePayoutRequestRecordsStatusFailed     UpdatePayoutRequestRecordsStatus = "failed"
	UpdatePayoutRequestRecordsStatusPending    UpdatePayoutRequestRecordsStatus = "pending"
	UpdatePayoutRequestRecordsStatusProcessing UpdatePayoutRequestRecordsStatus = "processing"
)

// Defines values for UpdatePayoutRequestStatus.
const (
	UpdatePayoutRequestStatusCompleted  UpdatePayoutRequestStatus = "completed"
	UpdatePayoutRequestStatusFailed     UpdatePayoutRequestStatus = "failed"
	UpdatePayoutRequestStatusPending    UpdatePayoutRequestStatus = "pending"
	UpdatePayoutRequestStatusProcessing UpdatePayoutRequestStatus = "processing"
)

// Defines values for UserListRequestSortOrder.
const (
	UserListRequestSortOrderAsc  UserListRequestSortOrder = "asc"
	UserListRequestSortOrderDesc UserListRequestSortOrder = "desc"
)

// AuditLog defines model for AuditLog.
type AuditLog struct {
	AuditLogType *struct {
		Code *string `json:"code,omitempty"`
		Id   *int    `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"audit_log_type,omitempty"`
	AuditLogTypeId *int       `json:"audit_log_type_id,omitempty"`
	CreatedAt      *time.Time `json:"created_at,omitempty"`
	Id             *int       `json:"id,omitempty"`
	IpAddress      *string    `json:"ip_address,omitempty"`
	Message        *string    `json:"message,omitempty"`
	UpdatedAt      *time.Time `json:"updated_at,omitempty"`
	UserAgent      *string    `json:"user_agent,omitempty"`
	UserId         *int       `json:"user_id,omitempty"`
}

// AuditLogListRequest defines model for AuditLogListRequest.
type AuditLogListRequest struct {
	AuditLogType string `json:"audit_log_type" query:"audit_log_type" validate:"omitempty"`
	CreatedAt    string `json:"created_at" query:"created_at" validate:"omitempty"`
	Description  string `json:"description" query:"description" validate:"omitempty"`
	Page         int    `json:"page" query:"page"`
	PageSize     int    `json:"page_size" query:"page_size" validate:"omitempty,min=1"`
	SortField    string `json:"sort_field" query:"sort_field" validate:"omitempty"`
	SortOrder    string `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
	UserId       int    `json:"user_id" query:"user_id" validate:"omitempty"`
}

// BadRequestError defines model for BadRequestError.
type BadRequestError struct {
	Error *struct {
		Code *string `json:"code,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// CreatePayoutRequest defines model for CreatePayoutRequest.
type CreatePayoutRequest struct {
	MerchantId        int `json:"merchant_id"`
	PaymentProviderId int `json:"payment_provider_id"`
	Records           *[]struct {
		Amount        *float32 `json:"amount,omitempty"`
		TransactionId *string  `json:"transaction_id,omitempty"`
	} `json:"records,omitempty"`
	TotalAmount float32 `json:"total_amount"`
}

// CreateRoleRequest defines model for CreateRoleRequest.
type CreateRoleRequest struct {
	Name          string `binding:"required" json:"name"`
	PermissionIds []int  `json:"permission_ids"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email      openapi_types.Email `json:"email" validate:"required,email"`
	EnabledMfa bool                `json:"enabled_mfa"`
	FullName   string              `json:"full_name" validate:"required"`
	Password   string              `json:"password" validate:"required,min=6"`
	RoleId     int                 `json:"role_id" validate:"required"`
}

// ForbiddenError defines model for ForbiddenError.
type ForbiddenError struct {
	Error *struct {
		Code *string `json:"code,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Error *struct {
		Code *string `json:"code,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Email User's email address
	Email string `json:"email" validate:"required,email"`

	// Password User's password
	Password string `json:"password" validate:"required"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token *string `json:"token,omitempty"`
	User  *User   `json:"user,omitempty"`
}

// Merchant defines model for Merchant.
type Merchant struct {
	CreatedAt         time.Time `json:"created_at"`
	Id                int       `json:"id"`
	MerchantName      string    `json:"merchant_name"`
	PaymentMerchantId string    `json:"payment_merchant_id"`
	PaymentProviderId int       `json:"payment_provider_id"`
	ShopId            int       `json:"shop_id"`
	ShopUrl           string    `json:"shop_url"`
	UpdatedAt         time.Time `json:"updated_at"`
}

// MerchantListRequest defines model for MerchantListRequest.
type MerchantListRequest struct {
	CreatedAtEnd   string `json:"created_at_end" query:"created_at_end" validate:"omitempty"`
	CreatedAtStart string `json:"created_at_start" query:"created_at_start" validate:"omitempty"`
	Page           int    `json:"page" query:"page"`
	PageSize       int    `json:"page_size" query:"page_size" validate:"omitempty,min=1"`
	ReviewStatus   []int  `json:"review_status" query:"review_status" validate:"omitempty"`
	Search         string `json:"search" query:"search" validate:"omitempty"`
	SortField      string `json:"sort_field" query:"sort_field" validate:"omitempty"`
	SortOrder      string `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// MerchantListResponse defines model for MerchantListResponse.
type MerchantListResponse struct {
	Merchants []Merchant `json:"merchants"`
	Page      int        `json:"page"`
	PageSize  int        `json:"page_size"`
	Total     int        `json:"total"`
}

// MfaType defines model for MfaType.
type MfaType struct {
	Id       *int    `json:"id,omitempty"`
	IsActive *bool   `json:"is_active,omitempty"`
	Title    *string `json:"title,omitempty"`
}

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	Error *struct {
		Code *string `json:"code,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// PaymentProvider defines model for PaymentProvider.
type PaymentProvider struct {
	Code      *string    `json:"code,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *int       `json:"id,omitempty"`
	IsActive  *bool      `json:"is_active,omitempty"`
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Payout defines model for Payout.
type Payout struct {
	CreatedAt         *time.Time       `json:"created_at,omitempty"`
	Id                *int             `json:"id,omitempty"`
	Merchant          *Merchant        `json:"merchant,omitempty"`
	MerchantId        *int             `json:"merchant_id,omitempty"`
	PaymentProvider   *PaymentProvider `json:"payment_provider,omitempty"`
	PaymentProviderId *int             `json:"payment_provider_id,omitempty"`
	Records           *[]struct {
		Amount        *float32             `json:"amount,omitempty"`
		CreatedAt     *time.Time           `json:"created_at,omitempty"`
		Id            *int                 `json:"id,omitempty"`
		PayoutId      *int                 `json:"payout_id,omitempty"`
		Status        *PayoutRecordsStatus `json:"status,omitempty"`
		TransactionId *string              `json:"transaction_id,omitempty"`
		UpdatedAt     *time.Time           `json:"updated_at,omitempty"`
	} `json:"records,omitempty"`
	Status      *PayoutStatus `json:"status,omitempty"`
	TotalAmount *float32      `json:"total_amount,omitempty"`
	UpdatedAt   *time.Time    `json:"updated_at,omitempty"`
}

// PayoutRecordsStatus defines model for Payout.Records.Status.
type PayoutRecordsStatus string

// PayoutStatus defines model for Payout.Status.
type PayoutStatus string

// PayoutListRequest defines model for PayoutListRequest.
type PayoutListRequest struct {
	// CreatedAt Filter by creation date
	CreatedAt string `json:"created_at" query:"created_at" validate:"omitempty"`

	// Page Page number for pagination
	Page int `json:"page" query:"page" validate:"omitempty,min=1"`

	// PageSize Number of items per page
	PageSize int `json:"page_size" query:"page_size" validate:"omitempty,min=1"`

	// PayoutStatus Filter by payout status
	PayoutStatus int `json:"payout_status" query:"payout_status" validate:"omitempty"`

	// SendingDate Filter by scheduled sending date
	SendingDate string `json:"sending_date" query:"sending_date" validate:"omitempty"`

	// SentDate Filter by actual sent date
	SentDate string `json:"sent_date" query:"sent_date" validate:"omitempty"`

	// SortField Field to sort results by
	SortField string `json:"sort_field" query:"sort_field"`

	// SortOrder Sort direction (ascending or descending)
	SortOrder PayoutListRequestSortOrder `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// PayoutListRequestSortOrder Sort direction (ascending or descending)
type PayoutListRequestSortOrder string

// PayoutListResponse defines model for PayoutListResponse.
type PayoutListResponse struct {
	Data *struct {
		Pagination *struct {
			Limit *int `json:"limit,omitempty"`
			Page  *int `json:"page,omitempty"`
			Pages *int `json:"pages,omitempty"`
			Total *int `json:"total,omitempty"`
		} `json:"pagination,omitempty"`
		Payouts *[]Payout `json:"payouts,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// Permission defines model for Permission.
type Permission struct {
	Code        *string    `json:"code,omitempty"`
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *int       `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// RequiredTwoFaResponse defines model for RequiredTwoFaResponse.
type RequiredTwoFaResponse struct {
	ExpiresIn   *int    `json:"expires_in,omitempty"`
	MfaType     *string `json:"mfa_type,omitempty"`
	RequiresMfa *bool   `json:"requires_mfa,omitempty"`
	User        *User   `json:"user,omitempty"`
}

// ResendCodeRequest defines model for ResendCodeRequest.
type ResendCodeRequest struct {
	Email   openapi_types.Email `json:"email" validate:"required,email"`
	MfaType *int                `json:"mfa_type,omitempty"`
}

// ResendCodeResponse defines model for ResendCodeResponse.
type ResendCodeResponse struct {
	CanResend     *bool `json:"can_resend,omitempty"`
	ExpiresIn     *int  `json:"expires_in,omitempty"`
	RemainingTime *int  `json:"remaining_time,omitempty"`
}

// Role defines model for Role.
type Role struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
	Success *bool                   `json:"success,omitempty"`
}

// UnauthorizedError defines model for UnauthorizedError.
type UnauthorizedError struct {
	Error *struct {
		Code *string `json:"code,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// UpdatePayoutRequest defines model for UpdatePayoutRequest.
type UpdatePayoutRequest struct {
	MerchantId        *int `json:"merchant_id,omitempty"`
	PaymentProviderId *int `json:"payment_provider_id,omitempty"`
	Records           *[]struct {
		Amount *float32 `json:"amount,omitempty"`

		// Id ID of existing record (for updates)
		Id            *int                              `json:"id,omitempty"`
		Status        *UpdatePayoutRequestRecordsStatus `json:"status,omitempty"`
		TransactionId *string                           `json:"transaction_id,omitempty"`
	} `json:"records,omitempty"`
	Status      *UpdatePayoutRequestStatus `json:"status,omitempty"`
	TotalAmount *float32                   `json:"total_amount,omitempty"`
}

// UpdatePayoutRequestRecordsStatus defines model for UpdatePayoutRequest.Records.Status.
type UpdatePayoutRequestRecordsStatus string

// UpdatePayoutRequestStatus defines model for UpdatePayoutRequest.Status.
type UpdatePayoutRequestStatus string

// UpdateRoleRequest defines model for UpdateRoleRequest.
type UpdateRoleRequest struct {
	Description   *string `json:"description,omitempty"`
	Name          string  `binding:"required" json:"name"`
	PermissionIds []int   `json:"permission_ids"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	Email      *openapi_types.Email `json:"email,omitempty" validate:"omitempty,email"`
	EnabledMfa *bool                `json:"enabled_mfa,omitempty"`
	FullName   *string              `json:"full_name,omitempty" validate:"omitempty"`
	Password   *string              `json:"password,omitempty" validate:"omitempty,min=6"`
	RoleId     *int                 `json:"role_id,omitempty" validate:"omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt  *time.Time `json:"created_at,omitempty"`
	Email      *string    `json:"email,omitempty"`
	EnabledMfa *bool      `json:"enabled_mfa,omitempty"`
	FullName   *string    `json:"full_name,omitempty"`
	Id         *int       `json:"id,omitempty"`
	MfaType    *MfaType   `json:"mfa_type,omitempty"`
	Role       *Role      `json:"role,omitempty"`
	UpdatedAt  *time.Time `json:"updated_at,omitempty"`
}

// UserListRequest defines model for UserListRequest.
type UserListRequest struct {
	Page      int                      `default:"1" json:"page" query:"page" validate:"min=1"`
	PageSize  int                      `default:"10" json:"page_size" query:"page_size" validate:"min=1"`
	RoleId    *int                     `json:"role_id" query:"role_id" validate:"omitempty,min=1"`
	Search    string                   `json:"search" query:"search" validate:"omitempty,max=255"`
	SortField string                   `json:"sort_field" query:"sort_field" validate:"omitempty"`
	SortOrder UserListRequestSortOrder `json:"sort_order" query:"sort_order" validate:"omitempty,oneof=asc desc"`
}

// UserListRequestSortOrder defines model for UserListRequest.SortOrder.
type UserListRequestSortOrder string

// UserListResponse defines model for UserListResponse.
type UserListResponse struct {
	Page       int    `json:"page"`
	PageSize   int    `json:"page_size"`
	Total      int    `json:"total"`
	TotalPages int    `json:"total_pages"`
	Users      []User `json:"users"`
}

// VerifyMFARequest defines model for VerifyMFARequest.
type VerifyMFARequest struct {
	Email openapi_types.Email `json:"email" validate:"required,email"`
	Token string              `json:"token" validate:"required"`
}

// VerifyMFAResponse defines model for VerifyMFAResponse.
type VerifyMFAResponse struct {
	Data *struct {
		Token *string `json:"token,omitempty"`
		User  *User   `json:"user,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// ListPaymentProvidersParams defines parameters for ListPaymentProviders.
type ListPaymentProvidersParams struct {
	// IsActive Filter by active status
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty"`
}

// ListAuditLogsJSONRequestBody defines body for ListAuditLogs for application/json ContentType.
type ListAuditLogsJSONRequestBody = AuditLogListRequest

// ListMerchantsJSONRequestBody defines body for ListMerchants for application/json ContentType.
type ListMerchantsJSONRequestBody = MerchantListRequest

// ListPayoutsJSONRequestBody defines body for ListPayouts for application/json ContentType.
type ListPayoutsJSONRequestBody = PayoutListRequest

// CreatePayoutJSONRequestBody defines body for CreatePayout for application/json ContentType.
type CreatePayoutJSONRequestBody = CreatePayoutRequest

// UpdatePayoutJSONRequestBody defines body for UpdatePayout for application/json ContentType.
type UpdatePayoutJSONRequestBody = UpdatePayoutRequest

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = CreateRoleRequest

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody = UpdateRoleRequest

// ListUsersJSONRequestBody defines body for ListUsers for application/json ContentType.
type ListUsersJSONRequestBody = UserListRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// ResendCodeJSONRequestBody defines body for ResendCode for application/json ContentType.
type ResendCodeJSONRequestBody = ResendCodeRequest

// VerifyMFAJSONRequestBody defines body for VerifyMFA for application/json ContentType.
type VerifyMFAJSONRequestBody = VerifyMFARequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List audit logs
	// (GET /admin/audit-logs)
	ListAuditLogs(ctx echo.Context) error
	// List merchants
	// (GET /admin/merchants)
	ListMerchants(ctx echo.Context) error
	// Get merchant details
	// (GET /admin/merchants/{id})
	GetMerchant(ctx echo.Context, id int) error
	// List payment providers
	// (GET /admin/payment-providers)
	ListPaymentProviders(ctx echo.Context, params ListPaymentProvidersParams) error
	// List payouts
	// (GET /admin/payouts)
	ListPayouts(ctx echo.Context) error
	// Create new payout
	// (POST /admin/payouts/create)
	CreatePayout(ctx echo.Context) error
	// Get payout details
	// (GET /admin/payouts/{id})
	GetPayout(ctx echo.Context, id int) error
	// Delete payout
	// (DELETE /admin/payouts/{id}/delete)
	DeletePayout(ctx echo.Context, id int) error
	// Update payout
	// (PUT /admin/payouts/{id}/update)
	UpdatePayout(ctx echo.Context, id int) error
	// List permissions
	// (GET /admin/permissions)
	ListPermissions(ctx echo.Context) error
	// List roles
	// (GET /admin/roles)
	ListRoles(ctx echo.Context) error
	// Create new role
	// (POST /admin/roles/create)
	CreateRole(ctx echo.Context) error
	// Get role details
	// (GET /admin/roles/{id})
	GetRole(ctx echo.Context, id int) error
	// Delete role
	// (DELETE /admin/roles/{id}/delete)
	DeleteRole(ctx echo.Context, id int) error
	// Update role
	// (PUT /admin/roles/{id}/update)
	UpdateRole(ctx echo.Context, id int) error
	// List users
	// (GET /admin/users)
	ListUsers(ctx echo.Context) error
	// Create new user
	// (POST /admin/users/create)
	CreateUser(ctx echo.Context) error
	// Get user details
	// (GET /admin/users/{id})
	GetUser(ctx echo.Context, id int) error
	// Delete user
	// (DELETE /admin/users/{id}/delete)
	DeleteUser(ctx echo.Context, id int) error
	// Update user
	// (PUT /admin/users/{id}/update)
	UpdateUser(ctx echo.Context, id int) error
	// Login user
	// (POST /auth/login)
	Login(ctx echo.Context) error
	// Logout user
	// (POST /auth/logout)
	Logout(ctx echo.Context) error
	// Get current user
	// (GET /auth/me)
	GetCurrentUser(ctx echo.Context) error
	// Resend MFA code
	// (POST /auth/resend-code)
	ResendCode(ctx echo.Context) error
	// Verify MFA token
	// (POST /auth/verify)
	VerifyMFA(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAuditLogs converts echo context to params.
func (w *ServerInterfaceWrapper) ListAuditLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListAuditLogs(ctx)
	return err
}

// ListMerchants converts echo context to params.
func (w *ServerInterfaceWrapper) ListMerchants(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMerchants(ctx)
	return err
}

// GetMerchant converts echo context to params.
func (w *ServerInterfaceWrapper) GetMerchant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMerchant(ctx, id)
	return err
}

// ListPaymentProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ListPaymentProviders(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaymentProvidersParams
	// ------------- Optional query parameter "is_active" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_active", ctx.QueryParams(), &params.IsActive)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_active: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPaymentProviders(ctx, params)
	return err
}

// ListPayouts converts echo context to params.
func (w *ServerInterfaceWrapper) ListPayouts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPayouts(ctx)
	return err
}

// CreatePayout converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePayout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePayout(ctx)
	return err
}

// GetPayout converts echo context to params.
func (w *ServerInterfaceWrapper) GetPayout(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPayout(ctx, id)
	return err
}

// DeletePayout converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePayout(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePayout(ctx, id)
	return err
}

// UpdatePayout converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePayout(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePayout(ctx, id)
	return err
}

// ListPermissions converts echo context to params.
func (w *ServerInterfaceWrapper) ListPermissions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPermissions(ctx)
	return err
}

// ListRoles converts echo context to params.
func (w *ServerInterfaceWrapper) ListRoles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListRoles(ctx)
	return err
}

// CreateRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRole(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRole(ctx)
	return err
}

// GetRole converts echo context to params.
func (w *ServerInterfaceWrapper) GetRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRole(ctx, id)
	return err
}

// DeleteRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRole(ctx, id)
	return err
}

// UpdateRole converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRole(ctx, id)
	return err
}

// ListUsers converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListUsers(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// GetCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentUser(ctx)
	return err
}

// ResendCode converts echo context to params.
func (w *ServerInterfaceWrapper) ResendCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResendCode(ctx)
	return err
}

// VerifyMFA converts echo context to params.
func (w *ServerInterfaceWrapper) VerifyMFA(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VerifyMFA(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/admin/audit-logs", wrapper.ListAuditLogs)
	router.GET(baseURL+"/admin/merchants", wrapper.ListMerchants)
	router.GET(baseURL+"/admin/merchants/:id", wrapper.GetMerchant)
	router.GET(baseURL+"/admin/payment-providers", wrapper.ListPaymentProviders)
	router.GET(baseURL+"/admin/payouts", wrapper.ListPayouts)
	router.POST(baseURL+"/admin/payouts/create", wrapper.CreatePayout)
	router.GET(baseURL+"/admin/payouts/:id", wrapper.GetPayout)
	router.DELETE(baseURL+"/admin/payouts/:id/delete", wrapper.DeletePayout)
	router.PUT(baseURL+"/admin/payouts/:id/update", wrapper.UpdatePayout)
	router.GET(baseURL+"/admin/permissions", wrapper.ListPermissions)
	router.GET(baseURL+"/admin/roles", wrapper.ListRoles)
	router.POST(baseURL+"/admin/roles/create", wrapper.CreateRole)
	router.GET(baseURL+"/admin/roles/:id", wrapper.GetRole)
	router.DELETE(baseURL+"/admin/roles/:id/delete", wrapper.DeleteRole)
	router.PUT(baseURL+"/admin/roles/:id/update", wrapper.UpdateRole)
	router.GET(baseURL+"/admin/users", wrapper.ListUsers)
	router.POST(baseURL+"/admin/users/create", wrapper.CreateUser)
	router.GET(baseURL+"/admin/users/:id", wrapper.GetUser)
	router.DELETE(baseURL+"/admin/users/:id/delete", wrapper.DeleteUser)
	router.PUT(baseURL+"/admin/users/:id/update", wrapper.UpdateUser)
	router.POST(baseURL+"/auth/login", wrapper.Login)
	router.POST(baseURL+"/auth/logout", wrapper.Logout)
	router.GET(baseURL+"/auth/me", wrapper.GetCurrentUser)
	router.POST(baseURL+"/auth/resend-code", wrapper.ResendCode)
	router.POST(baseURL+"/auth/verify", wrapper.VerifyMFA)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
